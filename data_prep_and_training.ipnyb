{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1TyiKSHbTIVfVfunZphPIVB_d_D6ixaKl","timestamp":1744351008677}],"authorship_tag":"ABX9TyM/f54qWB21lYni4YEI9cfs"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import files\n","uploaded = files.upload()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"FEMUHXbcEgKW","executionInfo":{"status":"ok","timestamp":1744350378349,"user_tz":-330,"elapsed":18134,"user":{"displayName":"keshav ahuja","userId":"08171675521474806586"}},"outputId":"6a9fc9c7-a30e-439c-8308-63fe76b96bf7"},"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-e1760fc3-dcd0-405e-a0c3-7205c576127b\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-e1760fc3-dcd0-405e-a0c3-7205c576127b\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving sample_dataset_18000.csv to sample_dataset_18000.csv\n"]}]},{"cell_type":"code","source":["\n","import os, shutil\n","\n","\n","os.makedirs(\"data/raw\", exist_ok=True)\n","\n","shutil.move(\"sample_dataset_18000.csv\", \"data/raw/sample_dataset_18000.csv\")\n","\n","\n","#  Data Processing and Model Training\n","\n","import pandas as pd\n","import numpy as np\n","import pickle\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n","\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.svm import SVC\n","from xgboost import XGBClassifier\n","\n","# Load dataset\n","df = pd.read_csv(\"data/raw/sample_dataset_18000.csv\")\n","\n","# ----------- PREPROCESSING -----------\n","# Split features and target\n","X = df.drop(\"target\", axis=1)\n","y = df[\"target\"]\n","\n","\n","X = pd.get_dummies(X, drop_first=True)\n","\n","# Split data\n","X_train, X_test, y_train, y_test = train_test_split(\n","    X, y, test_size=0.2, stratify=y, random_state=42\n",")\n","\n","# Scale numeric features\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)\n","\n","# Save the scaler\n","os.makedirs(\"models\", exist_ok=True)\n","with open(\"models/scaler.pkl\", \"wb\") as f:\n","    pickle.dump(scaler, f)\n","\n","# ----------- MODEL TRAINING -----------\n","models = {\n","    \"Logistic Regression\": LogisticRegression(max_iter=1000),\n","    \"Decision Tree\": DecisionTreeClassifier(),\n","    \"Random Forest\": RandomForestClassifier(),\n","    \"SVM\": SVC(probability=True),\n","    \"XGBoost\": XGBClassifier(use_label_encoder=False, eval_metric=\"logloss\"),\n","}\n","\n","metrics = []\n","\n","for name, model in models.items():\n","    model.fit(X_train_scaled, y_train)\n","    y_pred = model.predict(X_test_scaled)\n","\n","    acc = accuracy_score(y_test, y_pred)\n","    prec = precision_score(y_test, y_pred, average=\"weighted\", zero_division=0)\n","    rec = recall_score(y_test, y_pred, average=\"weighted\", zero_division=0)\n","    f1 = f1_score(y_test, y_pred, average=\"weighted\", zero_division=0)\n","\n","    metrics.append({\n","        \"Model\": name,\n","        \"Accuracy\": acc,\n","        \"Precision\": prec,\n","        \"Recall\": rec,\n","        \"F1-Score\": f1\n","    })\n","\n","    # Save model\n","    model_filename = f\"models/{name.replace(' ', '_').lower()}.pkl\"\n","    with open(model_filename, \"wb\") as f:\n","        pickle.dump(model, f)\n","\n","# Save metrics\n","os.makedirs(\"data/processed\", exist_ok=True)\n","pd.DataFrame(metrics).to_csv(\"data/processed/model_metrics.csv\", index=False)\n","\n","print(\" All done! Data prepped, models trained, and metrics saved.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nY-0qrrPE0qf","executionInfo":{"status":"ok","timestamp":1744350386950,"user_tz":-330,"elapsed":8586,"user":{"displayName":"keshav ahuja","userId":"08171675521474806586"}},"outputId":"a48a87ed-5df6-41d5-dd49-cc25daf69575"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":[" All done! Data prepped, models trained, and metrics saved.\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/xgboost/core.py:158: UserWarning: [05:46:27] WARNING: /workspace/src/learner.cc:740: \n","Parameters: { \"use_label_encoder\" } are not used.\n","\n","  warnings.warn(smsg, UserWarning)\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","metrics = pd.read_csv(\"data/processed/model_metrics.csv\")\n","metrics.head()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"95KzRrB8ZKDQ","executionInfo":{"status":"ok","timestamp":1744350524894,"user_tz":-330,"elapsed":276,"user":{"displayName":"keshav ahuja","userId":"08171675521474806586"}},"outputId":"6fa12e9c-c289-46a1-bab1-fe11cf58e06f"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                 Model  Accuracy  Precision    Recall  F1-Score\n","0  Logistic Regression  0.962778   0.961672  0.962778  0.962121\n","1        Decision Tree  0.995833   0.995857  0.995833  0.995843\n","2        Random Forest  0.998056   0.998053  0.998056  0.998048\n","3                  SVM  0.995000   0.994980  0.995000  0.994953\n","4              XGBoost  0.997222   0.997216  0.997222  0.997218"],"text/html":["\n","  <div id=\"df-9b4d56cd-57a0-4a76-9825-d1a0d0c0d534\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Accuracy</th>\n","      <th>Precision</th>\n","      <th>Recall</th>\n","      <th>F1-Score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Logistic Regression</td>\n","      <td>0.962778</td>\n","      <td>0.961672</td>\n","      <td>0.962778</td>\n","      <td>0.962121</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Decision Tree</td>\n","      <td>0.995833</td>\n","      <td>0.995857</td>\n","      <td>0.995833</td>\n","      <td>0.995843</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Random Forest</td>\n","      <td>0.998056</td>\n","      <td>0.998053</td>\n","      <td>0.998056</td>\n","      <td>0.998048</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>SVM</td>\n","      <td>0.995000</td>\n","      <td>0.994980</td>\n","      <td>0.995000</td>\n","      <td>0.994953</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>XGBoost</td>\n","      <td>0.997222</td>\n","      <td>0.997216</td>\n","      <td>0.997222</td>\n","      <td>0.997218</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9b4d56cd-57a0-4a76-9825-d1a0d0c0d534')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9b4d56cd-57a0-4a76-9825-d1a0d0c0d534 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9b4d56cd-57a0-4a76-9825-d1a0d0c0d534');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-598418a0-0c44-48df-b2ad-946c17ed1ea4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-598418a0-0c44-48df-b2ad-946c17ed1ea4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-598418a0-0c44-48df-b2ad-946c17ed1ea4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"metrics","summary":"{\n  \"name\": \"metrics\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Decision Tree\",\n          \"XGBoost\",\n          \"Random Forest\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.01514003563444775,\n        \"min\": 0.9627777777777776,\n        \"max\": 0.9980555555555556,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.9958333333333332,\n          0.9972222222222222,\n          0.9980555555555556\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.015632545377645208,\n        \"min\": 0.961672106858934,\n        \"max\": 0.998053301125709,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.995856902252856,\n          0.997215671911031,\n          0.998053301125709\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.01514003563444775,\n        \"min\": 0.9627777777777776,\n        \"max\": 0.9980555555555556,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.9958333333333332,\n          0.9972222222222222,\n          0.9980555555555556\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F1-Score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.01542810107460155,\n        \"min\": 0.9621212105174952,\n        \"max\": 0.9980480093600732,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.9958428912821752,\n          0.9972179343629894,\n          0.9980480093600732\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["import os\n","\n","# Create folders\n","folders = [\n","    \"data/raw\",\n","    \"data/processed\",\n","    \"models\",\n","    \"notebook\",\n","    \"dashboard\"\n","]\n","\n","for folder in folders:\n","    os.makedirs(folder, exist_ok=True)\n","\n","# Create README.md\n","readme_content = \"\"\"# Hackathon Project – Model Comparison\n","\n","## Team Member: [Your Name]\n","\n","### 💼 My Contribution:\n","- Cleaned the dataset\n","- Preprocessed (one-hot encoded + scaled)\n","- Trained 5 classification models:\n","  - Logistic Regression\n","  - Decision Tree\n","  - Random Forest\n","  - SVM\n","  - XGBoost\n","- Saved model metrics to CSV\n","- Saved trained models and scaler\n","\n","###  File Locations:\n","- Dataset: `data/raw/sample_dataset.csv`\n","- Processed Metrics: `data/processed/model_metrics.csv`\n","- Trained Models: `models/*.pkl`\n","- Notebook: `notebook/data_prep_and_train.ipynb`\n","\n","###  Next Steps:\n","- The dashboard team will use `model_metrics.csv` to create visual comparisons.\n","\n","> Let me know if you need help understanding model outputs or want to use any of the saved models!\n","\"\"\"\n","\n","with open(\"README.md\", \"w\") as f:\n","    f.write(readme_content)\n","\n","print(\" Project folders and README.md created!\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4azz5Vu0a0UZ","executionInfo":{"status":"ok","timestamp":1744350973044,"user_tz":-330,"elapsed":75,"user":{"displayName":"keshav ahuja","userId":"08171675521474806586"}},"outputId":"4a155e26-3eb1-4a95-db4d-e3f8f72970d6"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":[" Project folders and README.md created!\n"]}]}]}